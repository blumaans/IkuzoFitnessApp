@page "/goals/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable

<h3 class="card-title">Ikuzo Goals</h3>
<br />

<a href="/goals/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create Goals
</a>
<br />
<br />

@if (Goals == null)
{
    <div class="aler alert-info">Loading Goals...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Metric</th>
                <th>Value(Kg)</th>
                <th>Time Frame(Day)</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var goal in Goals)
            {
                <tr>
                    <td>@goal.TargetMetric</td>
                    <td>@goal.TargetValue</td>
                    <td>@((goal.EndDate - goal.StartDate).TotalDays.ToString())</td>
                    <td>
                        <a href="/goals/view/@goal.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/goals/edit/@goal.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <a href="/goals/graph/@goal.Id" class="btn btn-warning">
                            <span class="oi oi-flag"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(goal.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Goal>? Goals;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Goals = await _client.GetFromJsonAsync<List<Goal>>($"{Endpoints.GoalsEndpoint}");
    }

    async Task Delete(int goalId)
    {
        if (Goals != null)
        {
            var goal = Goals.First(q => q.Id == goalId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {goal.TargetMetric}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.GoalsEndpoint}/{goalId}");
                await OnInitializedAsync();
            }
        }
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }
}
