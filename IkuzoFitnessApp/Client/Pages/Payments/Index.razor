@page "/payments/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable

<h3 class="card-title">Ikuzo Payment</h3>
<br />

<a href="/payments/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Make payment
</a>
<br />
<br />

@if (Payments == null)
{
    <div class="aler alert-info">Loading Makes...</div>
}
else
{
    <table class="table table-responsive" id="bookingsTable">
        <thead>
            <tr>
                <th>Plan</th>
                <th>Type</th>
                <th>Holder Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var payment in Payments)
            {
                <tr>
                    <td>@payment.Plan</td>
                    <td>@payment.PaymentType</td>
                    <td>@payment.HolderName</td>
                    <td>
                        <a href="/payments/view/@payment.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/payments/edit/@payment.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(payment.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    private List<Payment>? Payments;
    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Payments = await _client.GetFromJsonAsync<List<Payment>>($"{Endpoints.PaymentsEndpoint}");
    }

    async Task Delete(int paymentId)
    {
        if (Payments != null)
        {
            var payment = Payments.First(q => q.Id == paymentId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {payment.Id}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.PaymentsEndpoint}/{paymentId}");
                await OnInitializedAsync();
            }
        }
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#bookingsTable");
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
        js.InvokeVoidAsync("DataTablesDispose", "#bookingsTable");
    }
}
